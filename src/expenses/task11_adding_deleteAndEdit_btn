import { useEffect,useState } from "react";
import "./ExpenseForm.css";

const ExpenseForm = () => {
  const [form, setForm] = useState({
    amount: "",
    description: "",
    category: "Food",
  });

  const [expenses, setExpenses] = useState([]);
  const [editingId, setEditingId] = useState(null);
  const handleDelete = async (id) => {
    try {
         await fetch("https://expensetracker-b3b82-default-rtdb.firebaseio.com/expenses/" + id + ".json", {
        method: "DELETE",
      });
      setExpenses((prev) => prev.filter((exp) => exp.id !== id));
      console.log("Expense successfully deleted");
    } catch (error) {
      console.error(error);
    }
  };
  const handleEdit=(expense)=>{
    setForm(expense);
    setEditingId(expense.id); 
  };

  const FIREBASE_URL = "https://expensetracker-b3b82-default-rtdb.firebaseio.com/expenses";
  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm({ ...form, [name]: value });
  };

  const handleSubmit = async(e) => {
    e.preventDefault();

    // Add new expensee
    try {
      if (editingId) {
        // PUT request to update existing expense
        await fetch(FIREBASE_URL + "/" + editingId + ".json", {
          method: "PUT",
          body: JSON.stringify(form),
          headers: { "Content-Type": "application/json" },
        });

        setExpenses((prev) =>
          prev.map((exp) => (exp.id === editingId ? { id: editingId, ...form } : exp))
        );

        setEditingId(null); // Reset editing state
      } else {
        // POST request to add new expense
        const response = await fetch(FIREBASE_URL + ".json", {
          method: "POST",
          body: JSON.stringify(form),
          headers: { "Content-Type": "application/json" },
        });

        const data = await response.json();
        const newExpense = { id: data.name, ...form };
        setExpenses((prev) => [...prev, newExpense]);
      }

      setForm({ amount: "", description: "", category: "Food" }); // Reset form
    } catch (error) {
      console.error(error);
    }
  };
   useEffect(() => {
    const fetchExpenses = async () => {
      try {
        const response = await fetch(FIREBASE_URL+".json");
        const data = await response.json();

        if (data) {
          const loadedExpenses = Object.entries(data).map(([id, exp]) => ({
            id, ...exp,
          }));
          setExpenses(loadedExpenses);
        }
      } catch (error) {
        console.error(error);
      }
    };

    fetchExpenses();
  }, []);

  return (
    <div className="expense-form-container">
        <div className="form_layout">
      <h2 className="expense_text">Add Expense</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label className="label_text">Amount:</label>
          <input
            type="number"
            name="amount"
            value={form.amount}
            onChange={handleChange}
            required
          />
        </div>

        <div>
          <label className="label_text">Description:</label>
          <input
            type="text"
            name="description"
            value={form.description}
            onChange={handleChange}
            required
          />
        </div>

        <div>
          <label className="label_text">Category:</label>
          <select
            name="category"
            className="select_field"
            value={form.category}
            onChange={handleChange}
          >
            <option value="Food">Food</option>
            <option value="Petrol">Petrol</option>
            <option value="Salary">Salary</option>
            <option value="Shopping">Shopping</option>
          </select>
        </div>

        <button type="submit" className="addExpense_btn">{editingId ? "Update Expense" : "Add Expense"}</button>
      </form>
      <hr/>
      <ul>
        {expenses.map((exp) => (
          <li key={exp.id}>
             {exp.amount} , {exp.description} ,  {exp.category}
            <button type="button" className="delete_btn" onClick={() => handleDelete(exp.id)} >Delete</button>
            <button type="button" className="edit_btn" onClick={()=>handleEdit(exp)} >Edit</button>
          </li>
        ))}
      </ul>
      </div>
    </div>
  );
};

export default ExpenseForm;
